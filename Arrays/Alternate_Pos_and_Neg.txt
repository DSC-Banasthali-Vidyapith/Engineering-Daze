/* We will first process the array in a left to right order. While processing, find the first flag element in the remaining unprocessed array. An element is flag if it is
negative and at odd index, or it is positive and at even index. Once we find an flag element, we find the first element which must be positive after it with opposite sign. This will 
rearrange the array elements.*/


class Solution {
    void Rotate(int arr[],int i,int j)   //Function to right rotate all elements
    {
        int temp=arr[j];
        for(int c=j;c>i;c--)
        {
            arr[c]=arr[c-1];
        }
        arr[i]=temp;
        
    }
    void rearrange(int arr[], int n) {
        int flag=-1;
        for(int i=0;i<n;i++)
        {
            if(flag>=0)
            {
                if((arr[flag]>=0 && arr[i]<0) ||(arr[flag]<0 && arr[i]>=0))
                {
                    Rotate(arr,flag,i);
                if(i-flag>=2)
                    flag+=2;
                else
                    flag=-1;
                }
            }
            if(flag==-1)
            {
                if((arr[i]<0 && i%2==0) || (arr[i]>=0 && i%2==1))
                {
                    flag=i;
                }
            }
        }
        
    }
    void printArray(int arr[], int n)
    {
        for (int i = 0; i < n; i++)
            System.out.print(arr[i] + " ");
        System.out.println("");
    }
    public static void main(String args[])
    {
    	Solution rearrange = new Solution();
    	int arr[] = new int[10];
    	int n = arr.length;
    	System.out.println("Given array is ");
        rearrange.printArray(arr, n);
 
        rearrange.rearrange(arr, n);
 
        System.out.println("RearrangeD array is ");
        rearrange.printArray(arr, n);
    	
    }
}


/* Input
N = 6
The given array is: -3 -7 6 4 -1 2
Output
Rearranged array is:= 6 -3 4 -7 2 -1

Time complexity : O(N)
Space complexity : O(N)
where N is the number of elements present in an array */

